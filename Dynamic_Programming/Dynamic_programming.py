import time
import tracemalloc

tracemalloc.start()
start = time.perf_counter_ns()


def Hamiltonian_path(adj, N):
    dp = [[False for i in range(1 << N)]
          for j in range(N)]

    # Set all dp[i][(1 << i)] to true
    for i in range(N):
        dp[i][1 << i] = True

    # Iterate over each subset of nodes
    for i in range(1 << N):
        for j in range(N):

            # If the jth nodes is included in the current subset
            if (i & (1 << j)) != 0:

                # Find K, neighbour of j also present in the current subset
                for k in range(N):
                    if ((i & (1 << k)) != 0 and
                            adj[k][j] == 1 and
                            j != k and
                            dp[k][i ^ (1 << j)]):
                        # Update dp[j][i] to true
                        dp[j][i] = True
                        break

    # Traverse the vertices
    for i in range(N):
        if dp[i][(1 << N) - 1]:
            return True
    return False


# adj = [[0, 1, 1, 1, 0],
#        [1, 0, 1, 0, 1],
#        [1, 1, 0, 1, 1],
#        [1, 0, 1, 0, 0]]


# adj = [[0, 1, 0, 1, 0, 0, 0, 1],
#        [1, 0, 1, 0, 0, 0, 1, 0],
#        [0, 1, 0, 1, 0, 1, 0, 0],
#        [1, 0, 1, 0, 1, 0, 0, 0],
#        [0, 0, 0, 1, 0, 1, 0, 1],
#        [0, 0, 1, 0, 1, 0, 1, 0],
#        [0, 1, 0, 0, 0, 1, 0, 1],
#        [1, 0, 0, 0, 1, 0, 1, 0]]

adj = {0: [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
       1: [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
       2: [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],
       3: [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
       4: [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
       5: [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
       6: [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
       7: [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0],
       8: [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
       9: [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
       10: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],
       11: [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]}

# adj = [[0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
#        [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
#        [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#        [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#        [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#        [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
#        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
#        [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#        [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
#        [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
#        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
#        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1],
#        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
#        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
#        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1],
#        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
#        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],
#        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1],
#        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]]

N = len(adj)

if Hamiltonian_path(adj, N):
    print("YES")
else:
    print("NO")

peak = tracemalloc.get_traced_memory()[1]
end = time.perf_counter_ns()
tracemalloc.stop()
time_of_execution = (end - start) / 10 ** 9
memory_used = peak / 10 ** 6
print("Czas wynosi:", time_of_execution)
print("Pamięć wynosi:", memory_used, "MB")
